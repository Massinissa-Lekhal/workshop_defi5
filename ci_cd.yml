

name: CI/CD Python + Docker

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - run: |
          python -m pip install -U pip
          pip install flake8
          flake8 src tests

  unit_tests:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - run: |
          pip install -r requirements.txt
          pytest -q --cov=src --cov-report=xml:coverage.xml

  non_regression:
    runs-on: ubuntu-latest
    needs: [unit_tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - run: |
          pip install -r requirements.txt
          pytest -q -m e2e

  build:
    runs-on: ubuntu-latest
    needs: [non_regression]
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t app:${{ github.sha }} .

  docker_smoke_test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build -t app:${{ github.sha }} .
      - name: Run container
        run: |
          docker run -d -p 8000:8000 --name app app:${{ github.sha }}
          sleep 4
          curl -f http://localhost:8000/health
      - name: Show logs if failed
        if: failure()
        run: docker logs app || true

  sonar:
    runs-on: ubuntu-latest
    needs: [docker_smoke_test]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - run: |
          pip install -r requirements.txt
          pytest -q --cov=src --cov-report=xml:coverage.xml
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [sonar]
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v4

      # Push de l'image vers Docker Hub
      - name: Login Docker Hub
        env:
          USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin

      - name: Build & Push
        env:
          USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          IMAGE=${USERNAME}/pyapp
          docker build -t $IMAGE:${{ github.sha }} -t $IMAGE:latest .
          docker push $IMAGE:${{ github.sha }}
          docker push $IMAGE:latest
